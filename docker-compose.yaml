services:
  grafana:
    image: grafana/grafana:12.1.0
    restart: unless-stopped
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_DEFAULT_THEME=system
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana            # persist
    depends_on: [prometheus, loki]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  prometheus:
    image: prom/prometheus:v3.5.0
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --web.enable-lifecycle
    ports: ["9090:9090"]
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - ./prometheus/alerts.yaml:/etc/prometheus/alerts.yaml:ro
      - prom_data:/prometheus                     # persist
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 3s
      retries: 10

  alertmanager:
    image: prom/alertmanager:v0.28.0
    restart: unless-stopped
    ports: ["9093:9093"]
    volumes:
      - ./alertmanager/alertmanager.yaml:/etc/alertmanager/alertmanager.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9093/-/ready"]
      interval: 10s
      timeout: 3s
      retries: 10

  loki:
    image: grafana/loki:3.5.0
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yaml
    ports: ["3100:3100"]
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_data:/var/loki                        # persist
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 3s
      retries: 10

  alloy:
    image: grafana/alloy:v1.10.0
    restart: unless-stopped
    command: ["run", "--server.http.listen-addr=0.0.0.0:12345", "/etc/alloy/config.alloy"]
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on: [loki, prometheus]

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - CHAOS=1
      - SLOW_MS=300
      - LOG_NOISE=1
    ports: ["8000:8000"]

  locust:
    image: locustio/locust:2.31.2
    command: -f /mnt/locust/locustfile.py
    ports: ["8089:8089"]               # UI
    environment:
      - LOCUST_HOST=http://app:8000    # target inside the compose network
      - LOCUST_WAIT_MIN=0.1            # seconds
      - LOCUST_WAIT_MAX=0.5
    volumes:
      - ./locust:/mnt/locust:ro
    depends_on: [app]

volumes:
  prom_data:
  loki_data:
  grafana_data:
